// <auto-generated />
using System;
using Dwellers.Common.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dwellers.Common.Infrastructure.Migrations
{
    [DbContext(typeof(DwellerDbContext))]
    [Migration("20240222112555_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dwellers.Bulletins.Domain.Bulletins.Bulletin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DwellerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IsModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DwellerId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("StatusId");

                    b.ToTable("Bulletins");
                });

            modelBuilder.Entity("Dwellers.Bulletins.Domain.Bulletins.BulletinPriority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BulletinPriorities");
                });

            modelBuilder.Entity("Dwellers.Bulletins.Domain.Bulletins.BulletinScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BulletinId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BulletinId")
                        .IsUnique();

                    b.ToTable("BulletinScopes");
                });

            modelBuilder.Entity("Dwellers.Bulletins.Domain.Bulletins.BulletinStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BulletinStatus");
                });

            modelBuilder.Entity("Dwellers.Bulletins.Domain.Bulletins.BulletinTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BulletinId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BulletinId");

                    b.ToTable("BulletinTags");
                });

            modelBuilder.Entity("Dwellers.Bulletins.Domain.Bulletins.ScopedDwelling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BulletinId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DwellingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BulletinId");

                    b.HasIndex("DwellingId");

                    b.ToTable("ScopedDwellings");
                });

            modelBuilder.Entity("Dwellers.Chat.Domain.Entities.DwellerConversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("IsModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DwellerConversations");
                });

            modelBuilder.Entity("Dwellers.Chat.Domain.Entities.DwellerMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DwellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IsCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("IsModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DwellerMessages");
                });

            modelBuilder.Entity("Dwellers.Chat.Domain.Entities.MemberInConversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DwellingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("IsCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("IsModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("DwellingId");

                    b.ToTable("MemberInConversations");
                });

            modelBuilder.Entity("Dwellers.DwellerCore.Domain.Entities.Dwellers.Dweller", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IsCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("IsModified")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ProfilePhoto")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Dwellers");
                });

            modelBuilder.Entity("Dwellers.DwellerCore.Domain.Entities.DwellingInhabitant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DwellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("DwellingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DwellerId");

                    b.HasIndex("DwellingId");

                    b.ToTable("DwellingInhabitants");
                });

            modelBuilder.Entity("Dwellers.DwellerCore.Domain.Entities.Dwellings.Dwelling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BulletinId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("DwellingProfilePhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("InvitationCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IsModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BulletinId");

                    b.ToTable("Dwellings");
                });

            modelBuilder.Entity("Dwellers.DwellerCore.Domain.Entities.Dwellings.DwellingGallery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DwellingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("DwellingImage")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("DwellingId");

                    b.ToTable("DwellingGallery");
                });

            modelBuilder.Entity("Dwellers.DwellersEvents.Domain.Entites.DwellerEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DwellerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("DwellingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EventScopeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("IsModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DwellerId");

                    b.HasIndex("DwellingId");

                    b.HasIndex("EventScopeId");

                    b.ToTable("DwellerEvents");
                });

            modelBuilder.Entity("Dwellers.DwellersEvents.Domain.Entites.ValueObjects.Visibility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Visibility");
                });

            modelBuilder.Entity("Dwellers.Offerings.Domain.DwellerItems.BorrowedItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<Guid>("DwellerItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DwellingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("IsCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("IsModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Returned")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DwellerItemId");

                    b.HasIndex("DwellingId");

                    b.ToTable("BorrowedItems");
                });

            modelBuilder.Entity("Dwellers.Offerings.Domain.DwellerItems.DwellerItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("IsModified")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ItemPhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ItemScope")
                        .HasColumnType("int");

                    b.Property<bool>("ItemStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DwellerItems");
                });

            modelBuilder.Entity("Dwellers.Offerings.Domain.DwellerServices.DwellerService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("IsModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceScope")
                        .HasColumnType("int");

                    b.Property<bool>("ServiceStatus")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("DwellerServices");
                });

            modelBuilder.Entity("Dwellers.Offerings.Domain.DwellerServices.ProvidedService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<Guid>("DwellerServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DwellingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("IsCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("IsModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsProvider")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ServiceReturned")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DwellerServiceId");

                    b.HasIndex("DwellingId");

                    b.ToTable("ProvidedServices");
                });

            modelBuilder.Entity("Dwellers.Bulletins.Domain.Bulletins.Bulletin", b =>
                {
                    b.HasOne("Dwellers.DwellerCore.Domain.Entities.Dwellers.Dweller", "Dweller")
                        .WithMany()
                        .HasForeignKey("DwellerId");

                    b.HasOne("Dwellers.Bulletins.Domain.Bulletins.BulletinPriority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dwellers.Bulletins.Domain.Bulletins.BulletinStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dweller");

                    b.Navigation("Priority");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Dwellers.Bulletins.Domain.Bulletins.BulletinScope", b =>
                {
                    b.HasOne("Dwellers.Bulletins.Domain.Bulletins.Bulletin", "Bulletin")
                        .WithOne("Scope")
                        .HasForeignKey("Dwellers.Bulletins.Domain.Bulletins.BulletinScope", "BulletinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bulletin");
                });

            modelBuilder.Entity("Dwellers.Bulletins.Domain.Bulletins.BulletinTag", b =>
                {
                    b.HasOne("Dwellers.Bulletins.Domain.Bulletins.Bulletin", "Bulletin")
                        .WithMany("Tags")
                        .HasForeignKey("BulletinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bulletin");
                });

            modelBuilder.Entity("Dwellers.Bulletins.Domain.Bulletins.ScopedDwelling", b =>
                {
                    b.HasOne("Dwellers.Bulletins.Domain.Bulletins.Bulletin", "Bulletin")
                        .WithMany()
                        .HasForeignKey("BulletinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dwellers.DwellerCore.Domain.Entities.Dwellings.Dwelling", "Dwelling")
                        .WithMany()
                        .HasForeignKey("DwellingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bulletin");

                    b.Navigation("Dwelling");
                });

            modelBuilder.Entity("Dwellers.Chat.Domain.Entities.MemberInConversation", b =>
                {
                    b.HasOne("Dwellers.Chat.Domain.Entities.DwellerConversation", "Conversation")
                        .WithMany("MemberInConversation")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dwellers.DwellerCore.Domain.Entities.Dwellings.Dwelling", "Dwelling")
                        .WithMany()
                        .HasForeignKey("DwellingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Dwelling");
                });

            modelBuilder.Entity("Dwellers.DwellerCore.Domain.Entities.DwellingInhabitant", b =>
                {
                    b.HasOne("Dwellers.DwellerCore.Domain.Entities.Dwellers.Dweller", "Dweller")
                        .WithMany()
                        .HasForeignKey("DwellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dwellers.DwellerCore.Domain.Entities.Dwellings.Dwelling", "Dwelling")
                        .WithMany("DwellingInhabitantList")
                        .HasForeignKey("DwellingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dweller");

                    b.Navigation("Dwelling");
                });

            modelBuilder.Entity("Dwellers.DwellerCore.Domain.Entities.Dwellings.Dwelling", b =>
                {
                    b.HasOne("Dwellers.Bulletins.Domain.Bulletins.Bulletin", null)
                        .WithMany("Dwellings")
                        .HasForeignKey("BulletinId");
                });

            modelBuilder.Entity("Dwellers.DwellerCore.Domain.Entities.Dwellings.DwellingGallery", b =>
                {
                    b.HasOne("Dwellers.DwellerCore.Domain.Entities.Dwellings.Dwelling", "Dwelling")
                        .WithMany("DwellingGallery")
                        .HasForeignKey("DwellingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dwelling");
                });

            modelBuilder.Entity("Dwellers.DwellersEvents.Domain.Entites.DwellerEvent", b =>
                {
                    b.HasOne("Dwellers.DwellerCore.Domain.Entities.Dwellers.Dweller", "Dweller")
                        .WithMany()
                        .HasForeignKey("DwellerId");

                    b.HasOne("Dwellers.DwellerCore.Domain.Entities.Dwellings.Dwelling", "Dwelling")
                        .WithMany()
                        .HasForeignKey("DwellingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dwellers.DwellersEvents.Domain.Entites.ValueObjects.Visibility", "EventScope")
                        .WithMany()
                        .HasForeignKey("EventScopeId");

                    b.Navigation("Dweller");

                    b.Navigation("Dwelling");

                    b.Navigation("EventScope");
                });

            modelBuilder.Entity("Dwellers.Offerings.Domain.DwellerItems.BorrowedItem", b =>
                {
                    b.HasOne("Dwellers.Offerings.Domain.DwellerItems.DwellerItem", "DwellerItem")
                        .WithMany("BorrowedItems")
                        .HasForeignKey("DwellerItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dwellers.DwellerCore.Domain.Entities.Dwellings.Dwelling", "Dwelling")
                        .WithMany()
                        .HasForeignKey("DwellingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DwellerItem");

                    b.Navigation("Dwelling");
                });

            modelBuilder.Entity("Dwellers.Offerings.Domain.DwellerServices.ProvidedService", b =>
                {
                    b.HasOne("Dwellers.Offerings.Domain.DwellerServices.DwellerService", "DwellerService")
                        .WithMany("ProvidedServices")
                        .HasForeignKey("DwellerServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dwellers.DwellerCore.Domain.Entities.Dwellings.Dwelling", "Dwelling")
                        .WithMany()
                        .HasForeignKey("DwellingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DwellerService");

                    b.Navigation("Dwelling");
                });

            modelBuilder.Entity("Dwellers.Bulletins.Domain.Bulletins.Bulletin", b =>
                {
                    b.Navigation("Dwellings");

                    b.Navigation("Scope")
                        .IsRequired();

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Dwellers.Chat.Domain.Entities.DwellerConversation", b =>
                {
                    b.Navigation("MemberInConversation");
                });

            modelBuilder.Entity("Dwellers.DwellerCore.Domain.Entities.Dwellings.Dwelling", b =>
                {
                    b.Navigation("DwellingGallery");

                    b.Navigation("DwellingInhabitantList");
                });

            modelBuilder.Entity("Dwellers.Offerings.Domain.DwellerItems.DwellerItem", b =>
                {
                    b.Navigation("BorrowedItems");
                });

            modelBuilder.Entity("Dwellers.Offerings.Domain.DwellerServices.DwellerService", b =>
                {
                    b.Navigation("ProvidedServices");
                });
#pragma warning restore 612, 618
        }
    }
}
